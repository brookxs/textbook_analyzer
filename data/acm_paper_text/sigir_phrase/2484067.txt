opportunity model for e-commerce recommendation : right product ; right time most of existing e-commerce-recommender systems aim to recommend the right product to a user , based on whether the user is likely to purchase or like a product . on the other hand , the effectiveness of recommendations also depends on the time of the recommendation . let us take a user who just purchased a laptop as an example . she may purchase a replacement battery in 2 years (assuming that the laptop 's original battery often fails to work around that time) and purchase a new laptop in another 2 years . in this case , it is not a good idea to recommend a new laptop or a replacement battery right after the user purchased the new laptop . it could hurt the user 's satisfaction of the recommender-system if she receives a potentially right product-recommendation at the wrong time . we argue that a system should not only recommend the most relevant item , but also recommend at the right time . this paper studies the new problem : how to recommend the right product at the right time ? we adapt the proportional hazards modeling approach in survival-analysis to the recommendation research field and propose a new opportunity model to explicitly incorporate time in an e-commerce-recommender system . the new model estimates the joint-probability of a user making a follow-up purchase of a particular product at a particular time . this joint purchase probability can be leveraged by recommender-systems in various scenarios , including the zero-query pull-based recommendation scenario (e.g. recommendation on an e-commerce web-site) and a proactive push-based promotion scenario (e.g. email or text message_based marketing) . we evaluate the opportunity modeling approach with multiple metrics . experimental-results on a data collected by a real-world e-commerce website (shop.com) show that it can predict a user 's follow-up purchase behavior at a particular time with descent accuracy . in addition , the opportunity model significantly improves the conversion-rate in pull-based systems and the user satisfaction/utility in push-based systems .