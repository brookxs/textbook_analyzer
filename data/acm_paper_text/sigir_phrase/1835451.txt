refactoring the search-problem the most common way of framing the search-problem is as an exchange between a user and a database , where the user-issues queries and the database replies with results that satisfy constraints imposed by the query but that also optimize some notion of relevance . there are several variations to this basic model that augment the dialogue between humans and machines through query-refinement , relevance-feedback , and other mechanism . however , rarely is this problem ever posed in a way in which the properties of the client and server are fundamentally different and in a way in which exploiting the differences can be used to yield substantially different experiences . i propose a reframing of the basic search-problem which presupposes that servers are scalable on most dimensions but suffer from low communication latencies while clients have lower scalability but support vastly richer user-interactions because of lower communication latencies . framed in this manner , there is clear utility in refactoring the search-problem so that user-interactions are processed fluidly by a client while the server is relegated to pre-computing the properties of a result-set that can not be efficiently left to the client . i will demonstrate pivot , an experimental client application that allows the user to visually interact with thousands of search-results at once , while using facetted-based exploration in a zoomable-interface . i will argue that the evolving structure of the web will tend to push all ir-based applications in a similar direction , which has the algorithmic intelligence increasingly split between clients and servers . put another way , my claim is that future clients will be neither thin nor dumb .