a mapping-mechanism to support bitmap-index and other auxiliary structures on tables stored as primary b + - trees any auxiliary structure , such as a bitmap or a b + - tree-index , that refers to rows of a table stored as a primary b + - tree (e.g. , tables with clustered index in microsoft-sql-server , or index-organized tables in oracle) by their physical addresses would require updates due to inherent volatility of those addresses . to address this problem , we propose a mapping-mechanism that 1) introduces a single mapping-table , with each row holding one key value from the primary b + - tree , as an intermediate structure between the primary b + - tree and the associated auxiliary structures , and 2) augments the primary b + - tree-structure to include in each row the physical address of the corresponding mapping-table row . the mapping-table row addresses can then be used in the auxiliary structures to indirectly refer to the primary b + - tree rows . the two key benefits are : 1) the mapping-table shields the auxiliary structures from the volatility of the primary b + - tree row addresses , and 2) the method allows reuse of existing conventional table mechanisms for supporting auxiliary structures on primary b + - trees . the mapping-mechanism is used for supporting bitmap-indexes on index-organized tables in oracle9i . the analytical and experimental-studies show that the method is storage efficient , and (despite the mapping-table overhead) provides performance benefits that are similar to those provided by bitmap-indexes implemented on conventional tables .