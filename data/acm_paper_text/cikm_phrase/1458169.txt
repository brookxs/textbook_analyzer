exploiting pipeline interruptions for efficient memory-allocation efficiency of memory-intensive operations is a key factor in obtaining good performance during multi-join query-processing . the pipelined-execution of these queries forces the operations in the query-plan to be processed concurrently . making a wrong decision regarding the amount of memory allocated for such operations can have a drastic impact on the response-time . however , some of the execution algorithms used at run time interrupt the pipelined-execution , ensuring that some operations are never executed concurrently . because of this , it is essential to explore new approaches in order to improve memory exploitation . in this paper , we address the problem of memory-allocation for multiple concurrent operations in a query-execution-plan . first , we study the dynamic needs for memory during the execution-time , and define when two operations coexist . then , we propose a post-optimization phase , which (i) identifies the operations that are concurrently executed at run time and (ii) costs different memory-allocation combinations to find a near optimal-solution for any type of query-execution-plan . we have implemented our techniques in the ibm db2 universal database '' (db2 udb) showing that they achieve significant execution-time improvements compared with previous approaches , especially for multi-join queries accessing large-data volumes .