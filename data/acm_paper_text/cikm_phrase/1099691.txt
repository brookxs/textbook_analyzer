handling frequent updates of moving-objects a critical issue in moving-object-databases is to develop appropriate indexing-structures for continuously moving-object locations so that queries can still be performed efficiently . however , such location changes typically cause a high volume of updates , which in turn poses serious problems on maintaining index-structures . in this paper we propose a lazy-group-update (lgu) algorithm for disk-based index-structures of moving-objects . lgu contains two key additional structures to group `` similar '' updates so that they can be performed together : a disk-based insertion buffer (i-buffer) for each internal node , and a memory-based deletion table (d-table) for the entire tree . different strategies of `` pushing down '' an overflow i-buffer to the next level are studied . comprehensive empirical-studies over uniform and skewed datasets , as well as simulated street traffic-data show that lgu achieves a significant improvement on update throughput while allowing a reasonable performance for queries .