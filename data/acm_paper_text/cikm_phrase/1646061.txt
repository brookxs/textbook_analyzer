a code-generation approach to optimizing high-performance distributed-data-stream-processing we present a code-generation-based optimization approach to bringing performance-and-scalability to distributed-stream-processing applications . we express stream-processing applications using an operator-based , stream-centric language called spade , which supports composing distributed-data-flow graphs out of toolkits of type-generic operators . a major challenge in building such applications is to find an effective and flexible way of mapping the logical graph of operators into a physical one that can be deployed on a set of distributed nodes . this involves finding how best operators map to processes and how best processes map to computing nodes . in this paper , we take a two-stage-optimization approach , where an instrumented version of the application is first generated by the spade compiler to profile and collect statistics about the processing and communication characteristics of the operators within the application . in the second stage , the profiling information is fed to an optimizer to come up with a physical data flow-graph that is deployable across nodes in a computing cluster . this approach not only creates highly optimized applications that are tailored to the underlying computing and networking infrastructure , but also makes it possible to re-target the application to a different hardware setup by simply repeating the optimization step and re-compiling the application to match the physical flow-graph produced by the optimizer . using real-world-applications , from diverse domains such as finance and radio-astronomy , we demonstrate the effectiveness of our approach on system-s -- a large-scale , distributed-stream-processing platform .