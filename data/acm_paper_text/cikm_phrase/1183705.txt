annotation propagation revisited for key preserving views this paper revisits the analysis of annotation propagation from source databases to views defined in terms of conjunctive (spj) queries . given a source database d , an spj query q , the view q (d) and a tuple ? v in the view , the view (resp . source) side-effect problem is to find a minimal set ? d of tuples such that the deletion of ? d from d results in the deletion of ? v from q (d) while minimizing the side-effects on the view (resp . the source) . a third problem , referred to as the annotation placement-problem , is to find a single base tuple ? d such that annotation in a field of ? d propagates to ? v while minimizing the propagation to other fields in the view q (d) . these are important for data-provenance and the management of view-updates . however important , these problems are unfortunately np-hard for most subclasses of spj views [5] . to make the annotation propagation analysis feasible in practice , we propose a key preserving condition on spj views , which requires that the projection fields of an spj view q retain a key of each base relation involved in q . while this condition is less restrictive than other proposals [11 , 14] , it often simplifies the annotation propagation analysis . indeed , for key-preserving spj views the annotation placement-problem coincides with the view side-effect problem , and the view and source side-effect problems become tractable . in addition we generalize the setting of [5] by allowing ? v to be a group of tuples to be deleted , and investigate the insertion of tuples to the view . we show that group updates make the analysis harder : these problems become np-hard for several subclasses of spj views . we also show that for spj views the source and view side-effect problems are np-hard for single-tuple insertion , but are tractable for some subclasses of spj for group insertions , in the presence or in the absence of the key preservation condition .