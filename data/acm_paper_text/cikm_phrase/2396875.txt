completeness of queries over sql databases data completeness is an important aspect of data-quality . we consider a setting , where databases can be incomplete in two ways : records may be missing and records may contain null-values . we (i) formalize when the answer set of a query is complete in spite of such incompleteness , and (ii) we introduce table completeness statements , by which one can express that certain parts of a database are complete . we then study how to deduce from a set of table-completeness statements that a query can be answered completely . null-values as used in sql are ambiguous . they can indicate either that no attribute-value exists or that a value exists , but is unknown . we study completeness reasoning for the different interpretations . we show that in the combined case it is necessary to syntactically distinguish between different kinds of null-values and present an encoding for doing that in standard sql databases . with this technique , any sql dbms evaluates complete queries correctly with respect to the different meanings that nulls can carry . we study the complexity of completeness reasoning and provide algorithms that in most cases agree with the worst-case lower-bounds .