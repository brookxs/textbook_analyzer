answering xml-queries using materialized-views revisited answering queries using views is a well-established technique in databases . in this context , two outstanding problems can be formulated . the first one consists in deciding whether a query can be answered exclusively using one or multiple materialized-views . given the many alternative ways to compute the query from the materialized-views , the second problem consists in finding the best way to compute the query from the materialized-views . in the realm of xml , there is a restricted number of contributions in the direction of these problems due to the many limitations associated with the use of materialized-views in traditional xml-query-evaluation models . in this paper , we adopt a recent evaluation-model , called inverted-lists model , and holistic-algorithms which together have been established as the prominent technique for evaluating queries on large persistent xml-data , and we address the previous two problems . this new context revises these problems since it requires new conditions for view usability and new techniques for computing queries from materialized-views . we suggest an original approach for materializing views which stores for every view node only the list of xml nodes necessary for computing the answer of the view . we specify necessary and sufficient-conditions for answering a tree-pattern query using one or multiple materialized-views in terms of homomorphisms from the views to the query . in order to efficiently answer queries using materialized-views , we design a stack-based-algorithm which compactly encodes in polynomial-time and space all the homomorphisms from a view to a query . we further propose space and time optimizations by using bitmaps to encode view materializations and by employing bitwise operations to minimize the evaluation cost of the queries . finally , we conducted an extensive experimentation which demonstrates that our approach yields impressive query hit rates in the view pool , achieves significant time and space savings and shows smooth scalability .