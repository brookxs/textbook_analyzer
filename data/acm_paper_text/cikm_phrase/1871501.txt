set-cover algorithms for very-large datasets the problem of set-cover - to find the smallest subcollection of sets that covers some universe - is at the heart of many data and analysis tasks . it arises in a wide range of settings , including operations-research , machine-learning , planning , data-quality and data-mining . although finding an optimal-solution is np-hard , the greedy-algorithm is widely used , and typically finds solutions that are close to optimal . however , a direct implementation of the greedy-approach , which picks the set with the largest number of uncovered items at each step , does not behave well when the input is very-large and disk resident . the greedy-algorithm must make many random accesses to disk , which are unpredictable and costly in comparison to linear scans . in order to scale set-cover to large-datasets , we provide a new algorithm which finds a solution that is provably close to that of greedy , but which is much more efficient to implement using modern disk technology . our experiments show a ten-fold improvement in speed on moderately-sized datasets , and an even greater improvement on larger datasets .