minipage locking support for object-oriented page-server dbms many object-oriented-database-systems are implemented using a page-server architecture for its performance advantages . since the applications envisioned for object-oriented dbmses typically spend a great deal of time processing data already in memory , fast in-memory access is very important . a page-server architecture will permit an implementation where most routine reference following (i.e. , where the referenced data is in memory and appropriately locked) is handled by virtual-memory hardware to eliminate expensive software overhead . one of the major drawbacks of this approach is that locking and authorization must be handled on a per-page basis , causing unacceptable low concurrency for high-contention data pages and difficulties in supporting fine-grained-authorization . with hardware-support on the client side for locks on minipages (subdivisions of a page) , however , it is possible to have good improvements in concurrency for high-contention areas of the database , along with the ability to do fine-grained-authorization . this paper presents a callback-read locking scheme that makes use of hardware-assisted locking of minipages and compares its performance with one that uses page protection under four different workloads . minipages are already available in several commonly used platforms , but only at the internal levels of the operating-system . we conclude that minipages improve performance significantly in high-contention workloads , with minimal performance-impact under low-contention workloads , and that minipage facilities should be made visible to client dbms code . we also discuss the application of our locking algorithms to page servers that supporting object-level locking .