db-ir-integration and its application to a massively-parallel search-engine nowadays , as there is an increasing need to integrate the dbms (for structured-data) with information-retrieval (ir) features (for unstructured-data) , db-ir-integration is becoming one of major challenges in the database area [1,2] . extensible architectures provided by commercial object-relational-dbms (ordbms) vendors can be used for db-ir-integration . here , extensions are implemented using a high-level (typically , sql-level) interface . we call this architecture loose-coupling . the advantage of loose-coupling is ease of implementation . but , loose-coupling is not preferable for implementing new data-types and operations in large-databases when high-performance is required . in this talk , we present a new dbms-architecture applicable to db-ir-integration , which we call tight-coupling . in tight-coupling , new data-types and operations are integrated into the core of the dbms engine in the extensible type layer . thus , they are incorporated as the `` first-class citizens '' [1] within the dbms-architecture and are supported in a consistent manner with high-performance . this tight-coupling architecture is being used to incorporate ir features and spatial-database features into the odysseus ordbms that has been under development at kaist/aitrc for over 19 years . in this talk , we introduce odysseus and explain its tightly-coupled ir features (u.s. patented in 2002 [2]) . then , we demonstrate excellence in performance of tight-coupling by showing benchmark results . we have built a web-search-engine that is capable of managing 100 million web-pages per node in a non-parallel configuration using odysseus . this engine has been successfully tested in many commercial environments . this work won the best demonstration award from the ieee icde conference held in tokyo , japan , in april 2005 [3] . last , we present a design of a massively-parallel search-engine using odysseus . recently , parallel-search engines have been implemented based on scalable distributed file-systems (e.g. , gfs) . nevertheless , building a massively-parallel search-engine using a dbms can be an attractive alternative since it supports a higher-level (i.e. , sql-level) interface than that of a distributed-file-system while providing scalability . the parallel-search engine designed is capable of indexing 30 billion web-pages with a performance comparable to or better than those of state-of-the-art search-engines .