an optimized implementation for vml based on pattern-matching and dynamic-programming in an object-oriented-database system (oodbs) , objects exist persistently and object i/o is transparent to the programmer . therefore , some mechanism in the system must initiate i/o as the program runs . in this paper we present an approach based on pattern-matching and dynamic-programming that allows a program to interact efficiently with the runtime storage layer . we are interested in allowing programs to manipulate very-large objects without necessarily reading them entirely . if a program touches only a small part of a large object , the problem is how to determine the part of the object needed . in this paper , we present an approach based on pattern-matching and dynamic-programming to resolve this problem . we discuss and solve this problem in the context of vml , a modeling-language of an open object-oriented-database language . the vml compiler translates vml programs into c++ programs which contain calls to the object manager . we provide a detailed description of our implementation with the hope that our approach will foster the development of object-oriented-database-systems based on c++ .