a positional access-method for relational-databases most commercial database management systems sort tuples of a relation by their primary-keys for the purpose of supporting efficient insertions , deletions , and updates . however , primary-keys are usually auto-generated integers , which bear little useful information about user-data . secondary-indexes have to be created sometimes to help retrieve tuples by columns other than the primary-key . evidently , a better solution is to sort the data by columns that appear frequently in retrieval conditions . unfortunately , this method does not work , at least not immediately , when the relation is vertically partitioned , which is a popular technique to reduce i/o overhead , since it is difficult to keep tuples of two partitions in exactly the same order unless the sorting columns are replicated , which again wastes storage space and disk bandwidth unnecessarily . in this paper , we introduce a positional access-method that allows a partition to be sorted by another one but incurs little storage overhead and provide details about how to improve its performance .