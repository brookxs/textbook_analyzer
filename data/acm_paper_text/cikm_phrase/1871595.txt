building efficient multi-threaded search nodes search nodes are single-purpose components of large web-search-engines and their efficient-implementation is critical to sustain thousands of queries per second and guarantee individual query response-times within a fraction of a second . current technology trends indicate that search nodes ought to be implemented as multi-threaded multi-core-systems . the straightforward solution that system designers can apply in this case is simply to follow standard practice by deploying one asynchronous thread per active query in the node and attaching each thread to a different core . each concurrent thread is responsible for sequentially processing a single query at a time . the only potential source of read/write conflicts among threads are the accesses to the different application caches present in the search node . however , new web applications pose much more demanding requirements in terms of read/write conflicts than recent past applications since now data updates must take place concurrently with query-processing . insisting on the same paradigm of concurrent-threads now augmented with a transaction concurrency-control protocol is a feasible solution . in this paper we propose a more efficient and much simpler solution which has the additional advantage of enabling a very efficient administration of application caches . we propose performing relaxed bulk-synchronous parallelism at multi-core level .